function isUserCreateValid(user) {
  return user.email is string;
}

function isMentorUpdateAllowed(oldData, newData) {
  return true;
}

function isTeacherUpdateAllowed(oldData, newData) {
  return true;
}

function isAbleToUpdateUser(oldData, newData) {
  return (
            ('email' in oldData && oldData.email == newData.email)
        || !('email' in oldData)
      )
      && (
            ('wasMentorBefore' in oldData && oldData.wasMentorBefore == newData.wasMentorBefore)
        || !('wasMentorBefore' in oldData)
      )
      && (
            ('schoolId' in oldData && oldData.schoolId == newData.schoolId)
        || !('schoolId' in oldData)
      );
      // && oldData.roles.keys() == newData.roles.keys()
      // && oldData.roles.admin == newData.roles.admin
      // && oldData.roles.teacher == newData.roles.teacher
      // && oldData.roles.mentor == newData.roles.mentor;
}

service cloud.firestore {
  match /databases/{database}/documents {
    function getUserRoles(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.roles;
    }

    function isAdmin(userId) {
      return get(/databases/$(database)/documents/admins/$(userId)) != null;
      // return getUserRoles(request.auth.uid).admin == true;
    }

    function isMentor(userId) {
      return get(/databases/$(database)/documents/mentors/$(userId)) != null;
    }

    function isTeacher(userId) {
      return get(/databases/$(database)/documents/teachers/$(userId)) != null;
    }

    match /schools/{schoolId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin(request.auth.uid);
    }

    match /mentors/{userId} {
      allow create: if request.auth.uid == userId;
      allow read: if isAdmin(request.auth.uid) || request.auth.uid == userId;
      allow update: if isAdmin(request.auth.uid)
                    || (request.auth.uid == userId && isMentorUpdateAllowed(resource.data, request.resource.data));
      allow delete, list: if isAdmin(request.auth.uid);
    }

    match /teachers/{userId} {
      allow create: if request.auth.uid == userId;
      allow read: if isAdmin(request.auth.uid) || request.auth.uid == userId || isMentor(request.auth.uid);
      allow update: if isAdmin(request.auth.uid)
                    || (request.auth.uid == userId && isTeacherUpdateAllowed(resource.data, request.resource.data));
      allow list: if isAdmin(request.auth.uid) || isMentor(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    match /timeslots/{slotId} {
      allow read, write: if request.auth.uid != null;
    }

    match /admins/{userId} {
      allow create: if isAdmin(request.auth.uid); // only other admin can add user as admin
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow update, delete, list: if isAdmin(request.auth.uid);
    }

    match /users/{userId} {
      allow create: if request.auth.uid == userId && isUserCreateValid(request.resource.data);
      // allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow read: if true;
      allow update: if isAdmin(request.auth.uid) || request.auth.uid == userId; // && isAbleToUpdateUser(resource.data, request.resource.data));
      allow delete: if false;
      allow list: if isAdmin(request.auth.uid);
    }
  }
}

